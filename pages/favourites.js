import Head from "next/head";
import { Inter } from "@next/font/google";
import { Box, Center, Flex, HStack, VStack } from "@chakra-ui/layout";
import { Portal } from "@chakra-ui/react";
import {
  Popover,
  PopoverTrigger,
  PopoverContent,
  PopoverBody,
  PopoverArrow,
  PopoverCloseButton,
} from "@chakra-ui/react";
import { Image } from "@chakra-ui/react";
import { Button } from "@chakra-ui/button";
import { FormControl } from "@chakra-ui/form-control";
import { Input } from "@chakra-ui/input";
import FavCard from "@/components/FavCardss-front";
import Navbar from "@/components/Navbarss-front";
import { Grid, GridItem } from "@chakra-ui/layout";
const inter = Inter({ subsets: ["latin"] });
import React, { useLayoutEffect, useState } from "react";
import {
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
} from "@chakra-ui/react";
import axios from "axios";
import { useMediaQuery } from "@chakra-ui/react";

export default function Favourites() {
  const [isOpen, setIsOpen] = useState(false);
  const [inputValue, setInputValue] = useState("");

  const [inputContent, setInputContent] = useState("");
  const [user, setUser] = useState("");

  useLayoutEffect(() => {
    const userId = localStorage.getItem("user");
    setUser(userId);

    axios
      .post("http://127.0.0.1:8000/api/getPhrases", {
        username: userId,
      })
      .then((response) => {
        const xyz = response.data;
        setList(xyz);
      })
      .catch(console.log);
  }, []);
  const [list, setList] = useState([]);

  const handleOpenModal = () => setIsOpen(true);

  const handleCloseModal = () => {
    setIsOpen(false);
    setInputValue("");
  };

  const [searchTerm, setSearchTerm] = useState("");
  const [searchResults, setSearchResults] = useState([]);

  const handleSearch = () => {
    if (searchTerm === "") {
      setSearchResults([]);
    } else {
      const results = list.filter((item) =>
        item.toLowerCase().includes(searchTerm.toLowerCase())
      );
      setSearchResults(results);
    }
  };

  const handleSearchInputChange = (e) => {
    setSearchTerm(e.target.value);
    setSearchResults([]);
  };

  // const handleInputChange = (e) => setInputValue(e.target.value);

  const handleSave = async () => {
    // Save the inputValue to the database
    axios
      .post("http://127.0.0.1:8000/api/save_phrase", {
        username: user,
        word_phrase: inputValue,
      })
      .then((response) => {
        console.log(response);
        axios
          .post("http://127.0.0.1:8000/api/getPhrases", {
            username: user,
          })
          .then((response) => {
            const xyz = response.data;
            setList(xyz);
          })
          .catch(console.log);
        // setValue("");
      })
      .catch(console.log);

    // handleCloseModal();
    setIsOpen(false);
    setInputValue("");
  };

  const HandleDelete = (del_phrase) => {
    console.log("del_phrase", del_phrase);
    axios
      .post("http://127.0.0.1:8000/api/delete_phrase", {
        username: user,
        word_phrase: del_phrase,
      })
      .then((response) => {
        console.log(response);
        axios
          .post("http://127.0.0.1:8000/api/getPhrases", {
            username: user,
          })
          .then((response) => {
            const xyz = response.data;
            setList(xyz);
          })
          .catch(console.log);
        // setValue("");
      })
      .catch(console.log);

    // handleCloseModal();
    setIsOpen(false);
    setInputValue("");
  };

  const [isMobile] = useMediaQuery("(max-width: 768px)"); // Returns true on mobile, false on desktop

  if (isMobile) {
    return (
      <>
        <Head>
          <title>Favourites</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="assets/icons/Hand_logo_yellow_1.svg" />
        </Head>
        <main>
          {/* <Flex minH={"100vh"}> */}
          <Box
            minH={"100vh"}
            padding="5"
            // flex="column"
            bgGradient="linear(to-l, #0B51DA, #4878FF)"
          >
            <Navbar />
            <Image
              maxHeight={10}
              marginTop="5"
              boxSize={"3xs"}
              src="assets/text/Favourite_Phrases.svg"
            />
            <br />
            <HStack marginBottom="3" alignItems="left">
              <FormControl backgroundColor="#E2EAF8" borderRadius="10">
                <Input
                  type="text"
                  placeholder="Search for phrases"
                  color="#9FB1CF"
                  alignContent="center"
                  value={searchTerm}
                  onChange={handleSearchInputChange}
                />
              </FormControl>
              <Button
                backgroundColor="#FFD53F"
                color="#0B51DA"
                onClick={handleSearch}
              >
                Search
              </Button>
            </HStack>
            <Button
              onClick={handleOpenModal}
              fontSize={"md"}
              fontWeight={600}
              color={"White"}
              fontFamily="Inter"
              bg={"none"}
              size="sm"
              marginBottom="2"
              border={"1px solid #F6F9FF"}
              href={"/"}
              _hover={{
                opacity: 0.7,
              }}
            >
              Add Phrase
            </Button>
            <Box
              display={"flex"}
              flexDirection="row"
              justifyContent={"center"}
              alignItems={"center"}
            >
              <Modal isOpen={isOpen} onClose={handleCloseModal} size="sm">
                <ModalOverlay />
                <ModalContent
                  height={"64"}
                  mx={4}
                  my="auto"
                  borderRadius="md"
                  display={"flex"}
                  alignContent={"center"}
                >
                  <ModalHeader>Add Phrase</ModalHeader>
                  <ModalBody>
                    <FormControl>
                      <Input
                        value={inputValue}
                        onChange={(e) => setInputValue(e.target.value)}
                      />
                    </FormControl>
                  </ModalBody>
                  <ModalFooter>
                    <Button colorScheme="blue" mr={3} onClick={handleSave}>
                      Save
                    </Button>
                    <Button variant="ghost" onClick={handleCloseModal}>
                      Cancel
                    </Button>
                  </ModalFooter>
                </ModalContent>
              </Modal>
            </Box>

            <Grid gap={5} width="100%" templateColumns="repeat(1, 1fr)">
              {/* {list.map((item) => (
                <FavCard
                  key={item}
                  fav={item}
                  onDelete={() => HandleDelete(item)}
                />
              ))} */}
              {(searchTerm === "" ? list : searchResults).map((item, index) => (
                <FavCard
                  key={item}
                  fav={item}
                  onDelete={() => HandleDelete(item)}
                />
              ))}
            </Grid>
          </Box>
          {/* </Flex> */}
        </main>
      </>
    );
  }
  return (
    <>
      <Head>
        <title>Favourites</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="assets/icons/Hand_logo_yellow_1.svg" />
      </Head>
      <main>
        {/* <Flex minH={"100vh"}> */}
        <Box
          minH={"100vh"}
          padding="5"
          flex="column"
          bgGradient="linear(to-l, #0B51DA, #4878FF)"
        >
          <Navbar />
          <Image
            maxHeight={10}
            // marginTop="2"
            boxSize={"3xs"}
            src="assets/text/Favourite_Phrases.svg"
          />
          <br />
          <HStack
            // marginTop="5%"
            padding="3"
            // marginBottom="3"
            alignItems="left"
          >
            <FormControl backgroundColor="#E2EAF8" borderRadius="10">
              <Input
                type="text"
                placeholder="Search for words"
                color="#9FB1CF"
                value={searchTerm}
                onChange={handleSearchInputChange}
                alignContent="center"
              />
            </FormControl>
            <Button
              backgroundColor="#FFD53F"
              color="#0B51DA"
              onClick={handleSearch}
            >
              Search
            </Button>
          </HStack>
          <Box padding="3">
            <Button
              onClick={handleOpenModal}
              fontSize={"md"}
              fontWeight={600}
              color={"White"}
              fontFamily="Inter"
              bg={"none"}
              size="sm"
              marginBottom="2"
              border={"1px solid #F6F9FF"}
              href={"/"}
              _hover={{
                opacity: 0.7,
              }}
            >
              Add Phrase
            </Button>
          </Box>
          <Modal isOpen={isOpen} onClose={handleCloseModal}>
            <ModalOverlay />
            <ModalContent mx={4} my="auto">
              <ModalHeader>Add Phrase</ModalHeader>
              <ModalBody>
                <FormControl>
                  <Input
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                  />
                </FormControl>
              </ModalBody>
              <ModalFooter>
                <Button colorScheme="blue" mr={3} onClick={handleSave}>
                  Save
                </Button>
                <Button variant="ghost" onClick={handleCloseModal}>
                  Cancel
                </Button>
              </ModalFooter>
            </ModalContent>
          </Modal>

          <Grid
            padding="3"
            gap={4}
            width="100%"
            templateColumns="repeat(3, minmax(200px,1fr))"
          >
            {/* {list.map((item) => (
              <FavCard
                key={item}
                fav={item}
                onDelete={() => HandleDelete(item)}
              />
            ))} */}
            {(searchTerm === "" ? list : searchResults).map((item, index) => (
              <FavCard
                key={item}
                fav={item}
                onDelete={() => HandleDelete(item)}
              />
            ))}
          </Grid>
        </Box>
        {/* </Flex> */}
      </main>
    </>
  );
}
